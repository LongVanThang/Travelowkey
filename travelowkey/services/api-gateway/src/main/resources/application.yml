spring:
  application:
    name: api-gateway
  
  # Redis Configuration
  redis:
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    password: ${REDIS_PASSWORD:}
    database: 0
    timeout: 2000ms
    lettuce:
      pool:
        max-active: 10
        max-idle: 8
        min-idle: 2
        max-wait: -1ms

  # Security Configuration
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID:}
            client-secret: ${GOOGLE_CLIENT_SECRET:}
            scope:
              - email
              - profile
          facebook:
            client-id: ${FACEBOOK_CLIENT_ID:}
            client-secret: ${FACEBOOK_CLIENT_SECRET:}
            scope:
              - email
              - public_profile

  # Circuit Breaker Configuration
  cloud:
    gateway:
      httpclient:
        connect-timeout: 5000
        response-timeout: 10s
      default-filters:
        - name: RequestRateLimiter
          args:
            rate-limiter: "#{@redisRateLimiter}"
            key-resolver: "#{@userKeyResolver}"
    
    # Load Balancer Configuration
    loadbalancer:
      ribbon:
        enabled: false

# Server Configuration
server:
  port: ${SERVER_PORT:8080}
  compression:
    enabled: true
    mime-types: application/json,application/xml,text/html,text/xml,text/plain
  http2:
    enabled: true

# Actuator Configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus,metrics
  endpoint:
    health:
      show-details: when_authorized
      probes:
        enabled: true
  health:
    circuitbreakers:
      enabled: true
    ratelimiters:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
    tags:
      application: ${spring.application.name}
      environment: ${ENVIRONMENT:development}

# JWT Configuration
jwt:
  secret: ${JWT_SECRET:travelowkey-super-secret-key-that-should-be-changed-in-production}
  expiration: 86400000 # 24 hours in milliseconds
  refresh-expiration: 604800000 # 7 days in milliseconds

# Resilience4j Circuit Breaker Configuration
resilience4j:
  circuitbreaker:
    instances:
      auth-circuit-breaker:
        sliding-window-size: 10
        minimum-number-of-calls: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state: 30s
        permitted-number-of-calls-in-half-open-state: 3
        automatic-transition-from-open-to-half-open-enabled: true
      user-circuit-breaker:
        sliding-window-size: 10
        minimum-number-of-calls: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state: 30s
      flight-circuit-breaker:
        sliding-window-size: 10
        minimum-number-of-calls: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state: 30s
      hotel-circuit-breaker:
        sliding-window-size: 10
        minimum-number-of-calls: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state: 30s
      car-circuit-breaker:
        sliding-window-size: 10
        minimum-number-of-calls: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state: 30s
      booking-circuit-breaker:
        sliding-window-size: 10
        minimum-number-of-calls: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state: 30s
      payment-circuit-breaker:
        sliding-window-size: 10
        minimum-number-of-calls: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state: 30s
      review-circuit-breaker:
        sliding-window-size: 10
        minimum-number-of-calls: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state: 30s
      admin-circuit-breaker:
        sliding-window-size: 10
        minimum-number-of-calls: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state: 30s

  # Rate Limiter Configuration
  ratelimiter:
    instances:
      default:
        limit-for-period: 10
        limit-refresh-period: 1s
        timeout-duration: 0s

# Logging Configuration
logging:
  level:
    com.travelowkey: DEBUG
    org.springframework.cloud.gateway: DEBUG
    org.springframework.security: DEBUG
    org.springframework.web.cors: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# Environment-specific configurations
---
spring:
  config:
    activate:
      on-profile: development

logging:
  level:
    root: DEBUG
    com.travelowkey: DEBUG

---
spring:
  config:
    activate:
      on-profile: production

logging:
  level:
    root: WARN
    com.travelowkey: INFO

server:
  forward-headers-strategy: framework

# Enable SSL in production
#  ssl:
#    enabled: true
#    key-store: classpath:keystore.p12
#    key-store-password: ${SSL_KEYSTORE_PASSWORD}
#    key-store-type: PKCS12

---
spring:
  config:
    activate:
      on-profile: docker

# Redis Configuration for Docker
  redis:
    host: redis
    port: 6379

# Service discovery for Docker containers
eureka:
  client:
    enabled: false